services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_app
    volumes:
      - ./backend/word_haku_api/word_haku_api/:/app/word_haku_api/
      - ./backend/.env:/app/word_haku_api/.env
      # - /app/poetry.lock # poetry.lockはコンテナ内のみで管理
    ports:
      - "8000:8000"
    depends_on:
      - mongo

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs_app
    volumes:
      - ./frontend/word-haku/src:/app/src
      # - /app/node_modules  # node_modulesはコンテナ内のみで管理
      # - /app/.next
    ports:
      - "3000:3000"

  mongo:
    image: mongo:8.0.3
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root # MongoDBの管理者のユーザー名
      MONGO_INITDB_ROOT_PASSWORD: xxxxxxxx # MongoDBの管理者のパスワード
      MONGO_INITDB_DATABASE: word_haku # 初期DBの作成
      TZ: Asia/Tokyo
    volumes:
      - mongo_data:/var/lib/mongodb
    #   - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js # 初期化スクリプトをコピー
    #   - ./mongodb/mongod.conf:/etc/mongod.conf
    # command: ["mongod", "--config", "/etc/mongod.conf"]


  
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: xxxxxxxx
      ME_CONFIG_MONGODB_URL: mongodb://root:xxxxxxxx@mongo:27017/
      ME_CONFIG_BASICAUTH: false


volumes:
  mongo_data:
